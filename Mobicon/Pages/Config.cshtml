@page
@using Models
@using Newtonsoft.Json
@model Mobicon.Pages.ConfigModel
@{
    ViewData["Title"] = Model.Name;
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<style>
    .table {
        table-layout:fixed;
    }
    .row-actions-td {
        position: relative;
    }
    .row-actions {
        display: none;
        position: absolute;
        top: 9px;
        right: 5px;
        width: 145px;
    }
    table tr:hover .row-actions {
        display: flex;
    }
    .delete-config-btn {
        margin-left: 36px;
    }
    #additionalEntryFields {
        display: flex;
        border-radius: 3px;
        box-shadow: 0px 0px 3px -1px;
        padding: 24px 0;
    }
    .fields-row-item + .fields-row-item {
        margin-left: 16px;
    }
    #additionalEntryFields, .fields-row + .fields-row {
        margin-top: 24px;
    }
    .add-edit-modal-body {
        width: 600px;
    }
    .field-label {
        margin-right: 24px;
        width: 75px;
        justify-content: left!important;
    }
</style>

<script>
    function onEditClick(data) {
        var obj = JSON.parse(data);

        $('input[name="entryId"]').val(obj.Id);
        $('input[name="key"]').val(obj.Key)
            .prop('disabled', true);
        $('input[name="value"]').val(obj.Value);
        $('input[name="description"]').val(obj.Description);
        $('input[name="jira"]').val(obj.Jira);
        
        $('input[name="versionFrom"]').val(obj.VersionPrefixFrom);
        $('input[name="versionTo"]').val(obj.VersionPrefixTo);
        $('input[name="segmentFrom"]').val(obj.SegmentPrefixFrom);
        $('input[name="segmentTo"]').val(obj.SegmentPrefixTo);
        $('#addEditEntryModalTitle').text('Edit entry');
        $('#addEditEntryModalSubmitBtn').text('Save');
        
        
        $("#typeSelect").selectpicker('val', obj.Type);

        $('#additionalEntryFields').hide();

        $('#addEditModal').modal('show');
    }

    function onDeleteClick(data) {
        var obj = JSON.parse(data);

        $('input[name="entryId"]').val(obj.Id);

        $('#deleteModal').modal('show');
    }

    function  onDeleteConfigClick() {
        $('#deleteConfigModal').modal('show');
    }

    function onAddClick() {
        $('input[name="entryId"]').val('');
        $('input[name="key"]').val('').prop('disabled', false);
        $('input[name="value"]').val('');
        $('input[name="description"]').val('');
        $('input[name="jira"]').val('');
        $('input[name="versionFrom"]').val('');
        $('input[name="versionTo"]').val('');
        $('input[name="segmentFrom"]').val('');
        $('input[name="segmentTo"]').val('');
        $('#addEditEntryModalTitle').text('Create entry');
        $('#addEditEntryModalSubmitBtn').text('Create');

        $('#additionalEntryFields').show();
        $("#typeSelect").selectpicker('val', '');
        $('#simplePrefixSelect').selectpicker();

        $('#addEditModal').modal('show');
    }
</script>


<!-- Delete Config Modal -->
<div class="modal fade" id="deleteConfigModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfig" aria-hidden="true">
    <form method="post" asp-page-handler="deleteConfig" asp-route-id="@Model.Id" class="form-inline">
        <div class="modal-dialog modal-lg delete-confirmation-modal" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfig">Delete confirmation</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure want to delete <span class="text-primary">@Model.Name </span> config?</p>
                    <p>This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Delete Entry Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteEntry" aria-hidden="true">
    <form method="post" asp-page-handler="delete" class="form-inline"
          asp-route-id="@Model.Id">
    <div class="modal-dialog modal-lg delete-confirmation-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteEntry">Delete confirmation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure want to delete entry?</p>
                <p>This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <input type="hidden" class="form-control" name="entryId">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
    </form>
</div>

<!-- Add/Edit Modal -->
<div class="modal fade" id="addEditModal" tabindex="-1" role="dialog" aria-labelledby="addEditEntryModal" aria-hidden="true">
    <form method="post" class="form-inline">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addEditEntryModalTitle"></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body d-flex flex-column add-edit-modal-body">
                    <input type="hidden" class="form-control" name="entryId">
                    <div class="d-flex fields-row">
                        <input required type="text" class="form-control fields-row-item w-100" name="key" placeholder="Key">
                    </div>
                    <div class="d-flex fields-row">
                        <input required type="text" class="form-control fields-row-item w-75" name="value" placeholder="Value">
                        <select required class="form-control fields-row-item" data-size="8" data-width="25%" title="Value type" name="type" id="typeSelect" >
                            @foreach (var type in Model.FieldTypes)
                            {
                                <option value="@((int)type)">@type</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex fields-row">
                        <input type="text" class="form-control fields-row-item w-75" name="description" placeholder="Description">
                        <input type="text" class="form-control fields-row-item w-25" name="jira" placeholder="Jira">
                    </div>
                    

                    <div class="flex-column" id="additionalEntryFields">
                        <div class="d-flex fields-row justify-content-center">
                            <label class="field-label">Versions:</label>
                            <input type="text" class="form-control fields-row-item w-25" name="versionFrom" placeholder="From">
                            <input type="text" class="form-control fields-row-item w-25" name="versionTo" placeholder="To">
                        </div>
                        <div class="d-flex fields-row justify-content-center">
                            <label class="field-label">Segments:</label>
                            <input type="text" class="form-control fields-row-item w-25" name="segmentFrom" placeholder="From">
                            <input type="text" class="form-control fields-row-item w-25" name="segmentTo" placeholder="To">
                        </div>
                        <div class="d-flex fields-row justify-content-center">
                            <label class="field-label prefixes-select">Platforms:</label>
                            <select class="form-control fields-row-item" data-size="8" data-width="300px" title="Select platforms" data-selected-text-format="count" name="simplePrefixes" id="simplePrefixSelect" asp-items="@(new SelectList(Model.SimplePrefixes, "Id", "Name"))" multiple></select>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button id="addEditEntryModalSubmitBtn" type="submit" class="btn btn-primary"></button>
                </div>

            </div>
        </div>
    </form>
</div>

<div class="d-flex justify-content-between align-items-center">
    <h2>@Model.Name entries <span class="badge badge-info">@Model.Entries.Length</span></h2>
    <div class="d-flex controls-section">
        <buton class="btn btn-primary" onclick="onAddClick()"><i class="fas fa-plus"></i> Create config entry</buton>
        @if (User.IsInRole(UserRole.Admin.ToString()) || User.Identity.Name == Model.CreatedBy)
        {
            <buton class="btn btn-danger delete-config-btn" onclick="onDeleteConfigClick()"><i class="fas fa-trash-alt"></i> Delete config</buton>
        }
    </div>
</div>
@if (Model.Entries.Length > 0)
{
    <div class="items-list">
        <form method="post" asp-page-handler="promoteKeys" asp-route-id="@Model.Id">
            <button type="submit">Save</button>
            <input type="text" name="snapshotName"/>
            <table class="table table-hover">
                <thead>
                <tr>
                    <th width="30">#</th>
                    <th width="10%">Prefixes</th>
                    <th width="25%">Key</th>
                    <th width="25%">Value</th>
                    <th width="120">Type</th>
                    <th width="15%">Description</th>
                    <th width="170">Jira</th>
                    <th width="160"></th>
                </tr>
                </thead>
                <tbody>
                @{
                    foreach (var entry in Model.Entries)
                    {
                        <tr data="@JsonConvert.SerializeObject(entry)">
                            <td>
                                @if (Model.LastPublished != null)
                                {
                                    if (!Model.LastPublished.Entries.Select(e => e.Entry.Id).Contains(entry.Id))
                                    {
                                        <input type="checkbox" name="entryIds" value="@entry.Id"/>
                                    }
                                }
                            </td>
                            <td>

                                <span>
                                    @string.Join(", ", entry.SimplePrefixes.Select(e => e.SimplePrefix.Name))
                                    @{
                                        if ((entry.VersionPrefixFrom ?? entry.VersionPrefixTo) != null)
                                        {
                                            Write($"({entry.VersionPrefixFrom} - {entry.VersionPrefixTo})");
                                        }

                                        if ((entry.SegmentPrefixFrom ?? entry.SegmentPrefixTo) != null)
                                        {
                                            Write($"<{entry.SegmentPrefixFrom} .. {entry.SegmentPrefixTo}>");
                                        }
                                    }
                                </span>
                            </td>
                            <td>@entry.Key <sup class="text-info">ver. @entry.Version</sup></td>
                            @switch (entry.Type)
                            {
                                case FieldType.String:
                                case FieldType.Integer:
                                case FieldType.Float:
                                case FieldType.Bool:
                                    <td>
                                        <script>document.write(JSON.parse('@Html.Raw(entry.Value)'));</script></td>
                                    break;
                                case FieldType.ListOfBool:
                                case FieldType.ListOfString:
                                case FieldType.ListOfInteger:
                                case FieldType.ListOfFloat:
                                    <td>
                                        <script>
                                            var list = JSON.parse('@Html.Raw(entry.Value)');
                                            if (list === undefined || list.length === 0) {
                                                document.write('Empty!!!1');
                                            } else {
                                                document.write("<ul>");
                                                for (var item of list) {
                                                    document.write("<li>");
                                                    document.write(item);
                                                    document.write("</li>");
                                                }
                                                document.write("</ul>");
                                            }
                                        </script>
                                    </td>

                                    break;
                                default:
                                    <td>Unknown</td>
                                    break;
                            }
                            <td>@entry.Type</td>
                            <td>@entry.Description</td>
                            <td><a href="https://jira.playtika.com/browse/@entry.Jira">@entry.Jira</a></td>
                            <td class="row-actions-td">
                                <div class="row-actions justify-content-between">
                                    <button type="button" class="btn btn-outline-info btn-sm" onclick="onEditClick($(this).closest('tr').attr('data'))"><i class="fas fa-edit"></i> Edit</button>
                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="onDeleteClick($(this).closest('tr').attr('data'))"><i class="fas fa-trash-alt"></i> Delete</button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </form>
    </div>
}
else
{
    <div class="empty-data">
        <img src="no_data.png"/>
    </div>
}